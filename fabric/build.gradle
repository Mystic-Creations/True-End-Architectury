plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"


    modImplementation "com.github.glitchfiend:TerraBlender-fabric:1.20.1-3.0.1.10"

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.5.0"))
    include "io.github.llamalad7:mixinextras-fabric:0.5.0"

    modImplementation 'com.github.Nostalgica-Reverie.Nostalgic-Tweaks:NostalgicTweaks-fabric:1.20.1-SNAPSHOT'
    modImplementation "com.terraformersmc:modmenu:7.2.2"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
    modApi("me.shedaniel.cloth:cloth-config-fabric:11.1.136") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
