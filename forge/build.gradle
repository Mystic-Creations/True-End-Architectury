plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "true_end.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}



dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"
    modImplementation "me.shedaniel.cloth:cloth-config-forge:11.1.136"

    modImplementation "com.github.glitchfiend:TerraBlender-forge:1.20.1-3.0.1.10"

    //runClient not launching for some reason
    //modImplementation 'com.github.Nostalgica-Reverie.Nostalgic-Tweaks:NostalgicTweaks-forge:1.20.1-SNAPSHOT'

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-forge:0.5.0"))
    include("io.github.llamalad7:mixinextras-forge:0.5.0")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')


}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
